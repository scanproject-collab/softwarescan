datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String         @id @default(auto()) @map("_id") @db.ObjectId
  email                     String         @unique
  password                  String?
  name                      String?
  role                      Role
  verificationCode          String?        @map("verificationCode")
  verificationCodeExpiresAt DateTime?
  passwordResetCode         String?        @map("resetCode")
  resetCodeExpiresAt        DateTime?
  institutionId             String?        @db.ObjectId
  institution               Institution?   @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts                     Post[]
  createdAt                 DateTime?      @default(now())
  updatedAt                 DateTime?      @updatedAt
  lastLoginDate             DateTime?
  authoredInstitutions      Institution[]  @relation("InstitutionAuthor")
  isPending                 Boolean        @default(true)
  expiresAt                 DateTime?
  playerId                  String?
  notifications             Notification[] @relation("UserNotifications")
  polygons                  Polygon[]      @relation("PolygonAuthor")

  @@index([passwordResetCode])
}

model Institution {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation(fields: [], references: [])
  author    User?    @relation("InstitutionAuthor", fields: [authorId], references: [id])
  authorId  String?  @db.ObjectId
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  imageUrl    String?
  tags        String[]
  location    String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  weight      String?  @default("Baixo")
  ranking     String?  @default("Baixo")
  offlineId   String?

  @@unique([authorId, offlineId], map: "author_offlineid_unique")
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  weight    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Polygon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  points    Json
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @db.ObjectId
  author    User     @relation("PolygonAuthor", fields: [authorId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  message   String
  userId    String   @db.ObjectId
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  OPERATOR
  MANAGER
}
