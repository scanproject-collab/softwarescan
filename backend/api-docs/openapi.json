{
  "openapi": "3.1.0",
  "info": {
    "title": "Plataforma Scan API Documentation",
    "description": "API documentation for the Plataforma Scan system that provides information for both mobile and web applications of the software.",
    "version": "3.5.0",
    "contact": {
      "name": "Plataforma Scan Support",
      "email": "support@plataformascan.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development Server"
    },
    {
      "url": "https://api.plataformascan.com",
      "description": "Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MANAGER",
              "OPERATOR"
            ]
          },
          "isPending": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri"
          },
          "authorId": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Institution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Polygon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number"
                },
                "lng": {
                  "type": "number"
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Register a new user with the system",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "name",
                  "verificationCode"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password"
                  },
                  "name": {
                    "type": "string",
                    "description": "User's full name"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "Verification code sent to user's email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or verification code"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login to the system",
        "description": "Authenticate a user and return a JWT token",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/send-verification-code": {
      "post": {
        "summary": "Send verification code",
        "description": "Sends a verification code to the user's email for registration",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Código de verificação enviado para o seu email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already in use"
          }
        }
      }
    },
    "/auth/generate-verification-code": {
      "post": {
        "summary": "Generate verification code for admin",
        "description": "Generates a verification code for admin to create manager accounts",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Manager's email address"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Código de verificação gerado com sucesso"
                    },
                    "verificationCode": {
                      "type": "string",
                      "example": "a1b2c3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already in use by an active user"
          }
        }
      }
    },
    "/auth/password-recovery/request": {
      "post": {
        "summary": "Request password reset",
        "description": "Sends a password reset code to the user's email",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset code sent successfully"
          },
          "400": {
            "description": "Invalid email or user not found"
          }
        }
      }
    },
    "/auth/password-recovery/verify-code": {
      "post": {
        "summary": "Verify password reset code",
        "description": "Verifies the reset code sent to the user's email",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "resetCode"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "resetCode": {
                    "type": "string",
                    "description": "Reset code sent to user's email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset code verified successfully"
          },
          "400": {
            "description": "Invalid or expired reset code"
          }
        }
      }
    },
    "/auth/password-recovery/reset": {
      "post": {
        "summary": "Reset password",
        "description": "Resets the user's password with a new one",
        "tags": [
          "Authentication"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "resetCode",
                  "newPassword"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "resetCode": {
                    "type": "string",
                    "description": "Reset code sent to user's email"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid or expired reset code, or missing required fields"
          }
        }
      }
    },
    "/auth/verify-token": {
      "get": {
        "summary": "Verify JWT token",
        "description": "Verifies if the JWT token is valid",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "example": true
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          }
        }
      }
    },
    "/posts/create": {
      "post": {
        "summary": "Create a new post",
        "description": "Creates a new post with image upload",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "content",
                  "image"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Post title"
                  },
                  "content": {
                    "type": "string",
                    "description": "Post content"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Latitude coordinate"
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Longitude coordinate"
                  },
                  "tagIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of tag IDs to associate with the post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/posts/my-posts": {
      "get": {
        "summary": "List user's posts",
        "description": "Retrieves all posts created by the authenticated operator",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "summary": "Get post by ID",
        "description": "Retrieves a specific post by its ID",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "ID of the post to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "summary": "Delete post",
        "description": "Deletes a specific post by its ID",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "ID of the post to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/operator/update": {
      "put": {
        "summary": "Update operator account",
        "description": "Updates the authenticated operator's account information",
        "tags": [
          "Operator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the operator"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "New email for the operator"
                  },
                  "currentPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password (required for validation)"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operator account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Operator account updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or current password is incorrect"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/operator/delete": {
      "delete": {
        "summary": "Delete operator account",
        "description": "Deletes the authenticated operator's account",
        "tags": [
          "Operator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operator account deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "500": {
            "description": "Error deleting operator account"
          }
        }
      }
    },
    "/admin/delete-expired-operators": {
      "post": {
        "summary": "Delete expired operators",
        "description": "Deletes operators whose registration has expired",
        "tags": [
          "Admin"
        ],
        "parameters": [
          {
            "name": "x-cron-secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Secret key for cron job authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Expired operators deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Expired operators deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized: Invalid cron secret"
          },
          "500": {
            "description": "Error deleting expired operators"
          }
        }
      }
    },
    "/admin/operators": {
      "get": {
        "summary": "List all operators",
        "description": "Retrieves a list of all operators",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/admin/operator/{operatorId}": {
      "delete": {
        "summary": "Delete operator by ID",
        "description": "Deletes an operator by their ID (admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the operator to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Operator deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Operator not found"
          },
          "500": {
            "description": "Error deleting operator"
          }
        }
      }
    },
    "/admin/pending-operators": {
      "get": {
        "summary": "List pending operators",
        "description": "Retrieves a list of operators pending approval",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/admin/approve-operator/{operatorId}": {
      "post": {
        "summary": "Approve operator",
        "description": "Approves a pending operator by their ID",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the operator to approve"
          }
        ],
        "responses": {
          "200": {
            "description": "Operator approved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Operator not found"
          },
          "500": {
            "description": "Error approving operator"
          }
        }
      }
    },
    "/admin/reject-operator/{operatorId}": {
      "delete": {
        "summary": "Reject operator",
        "description": "Rejects and deletes a pending operator by their ID",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the operator to reject"
          }
        ],
        "responses": {
          "200": {
            "description": "Operator rejected successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Operator not found"
          },
          "500": {
            "description": "Error rejecting operator"
          }
        }
      }
    },
    "/admin/listAllPosts": {
      "get": {
        "summary": "List all posts",
        "description": "Retrieves a list of all posts in the system (admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/admin/notifications": {
      "get": {
        "summary": "List notifications",
        "description": "Retrieves a list of notifications for admins and managers",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/admin/update": {
      "put": {
        "summary": "Update admin account",
        "description": "Updates the admin's account information",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the admin"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "New email for the admin"
                  },
                  "currentPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password (required for validation)"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Admin account updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or current password is incorrect"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/admin/managers": {
      "get": {
        "summary": "List all managers",
        "description": "Retrieves a list of all managers in the system",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of managers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      },
      "post": {
        "summary": "Create manager",
        "description": "Creates a new manager account",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password",
                  "verificationCode"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Manager's name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Manager's email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Manager's password"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "Verification code for manager creation"
                  },
                  "institutionId": {
                    "type": "string",
                    "description": "ID of the institution the manager belongs to (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Manager created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Manager created successfully"
                    },
                    "manager": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or verification code"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/admin/managers/{managerId}/institution": {
      "put": {
        "summary": "Update manager's institution",
        "description": "Updates the institution a manager belongs to",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the manager to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "institutionId"
                ],
                "properties": {
                  "institutionId": {
                    "type": "string",
                    "description": "ID of the new institution"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Manager's institution updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Manager or institution not found"
          }
        }
      }
    },
    "/admin/managers/{managerId}": {
      "delete": {
        "summary": "Delete manager",
        "description": "Deletes a manager by their ID",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the manager to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Manager deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Manager not found"
          }
        }
      }
    },
    "/manager/operators": {
      "get": {
        "summary": "List operators for manager",
        "description": "Retrieves a list of operators that belong to the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required"
          }
        }
      }
    },
    "/manager/pending-operators": {
      "get": {
        "summary": "List pending operators for manager",
        "description": "Retrieves a list of pending operators that belong to the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required"
          }
        }
      }
    },
    "/manager/approve-operator/{operatorId}": {
      "post": {
        "summary": "Approve operator for manager",
        "description": "Approves a pending operator in the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the operator to approve"
          }
        ],
        "responses": {
          "200": {
            "description": "Operator approved successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required or operator not in manager's institution"
          },
          "404": {
            "description": "Operator not found"
          }
        }
      }
    },
    "/manager/reject-operator/{operatorId}": {
      "delete": {
        "summary": "Reject operator for manager",
        "description": "Rejects a pending operator in the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the operator to reject"
          }
        ],
        "responses": {
          "200": {
            "description": "Operator rejected successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required or operator not in manager's institution"
          },
          "404": {
            "description": "Operator not found"
          }
        }
      }
    },
    "/manager/listAllPosts": {
      "get": {
        "summary": "List all posts for manager",
        "description": "Retrieves a list of all posts in the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required"
          }
        }
      }
    },
    "/manager/posts/{postId}": {
      "delete": {
        "summary": "Delete post for manager",
        "description": "Deletes a post in the manager's institution",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the post to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required or post not in manager's institution"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/manager/notifications": {
      "get": {
        "summary": "List notifications for manager",
        "description": "Retrieves a list of notifications for the manager",
        "tags": [
          "Manager"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Manager access required"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "List all tags",
        "description": "Retrieves a list of all tags in the system",
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/weights": {
      "get": {
        "summary": "List tag weights",
        "description": "Retrieves a list of all tag weights",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of tag weights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "weight": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          }
        }
      }
    },
    "/tags/create": {
      "post": {
        "summary": "Create a new tag",
        "description": "Creates a new tag in the system",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Tag name"
                  },
                  "weight": {
                    "type": "number",
                    "description": "Tag weight"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or tag already exists"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/tags/{name}": {
      "put": {
        "summary": "Update a tag",
        "description": "Updates an existing tag",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the tag to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "weight": {
                    "type": "number",
                    "description": "New weight for the tag"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      }
    },
    "/tags/{id}": {
      "delete": {
        "summary": "Delete a tag",
        "description": "Deletes an existing tag",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the tag to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      }
    },
    "/institutions": {
      "get": {
        "summary": "List all institutions",
        "description": "Retrieves a list of all institutions",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "List of institutions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new institution",
        "description": "Creates a new institution",
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Institution name"
                  },
                  "address": {
                    "type": "string",
                    "description": "Institution address"
                  },
                  "city": {
                    "type": "string",
                    "description": "Institution city"
                  },
                  "state": {
                    "type": "string",
                    "description": "Institution state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Institution created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/institutions/{id}": {
      "put": {
        "summary": "Update an institution",
        "description": "Updates an existing institution",
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the institution to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Institution name"
                  },
                  "address": {
                    "type": "string",
                    "description": "Institution address"
                  },
                  "city": {
                    "type": "string",
                    "description": "Institution city"
                  },
                  "state": {
                    "type": "string",
                    "description": "Institution state"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Institution updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Institution not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an institution",
        "description": "Deletes an existing institution",
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the institution to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Institution deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Institution not found"
          }
        }
      }
    },
    "/polygons/create": {
      "post": {
        "summary": "Create a new polygon",
        "description": "Creates a new polygon",
        "tags": [
          "Polygons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "coordinates"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Polygon name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Polygon description"
                  },
                  "coordinates": {
                    "type": "array",
                    "description": "Array of coordinates forming the polygon",
                    "items": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number"
                        },
                        "lng": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Polygon created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Polygon"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/polygons": {
      "get": {
        "summary": "List all polygons",
        "description": "Retrieves a list of all polygons",
        "tags": [
          "Polygons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of polygons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Polygon"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          }
        }
      }
    },
    "/polygons/{polygonId}": {
      "put": {
        "summary": "Update a polygon",
        "description": "Updates an existing polygon",
        "tags": [
          "Polygons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "polygonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the polygon to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Polygon name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Polygon description"
                  },
                  "coordinates": {
                    "type": "array",
                    "description": "Array of coordinates forming the polygon",
                    "items": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number"
                        },
                        "lng": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Polygon updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Polygon"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Polygon not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a polygon",
        "description": "Deletes an existing polygon",
        "tags": [
          "Polygons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "polygonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the polygon to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Polygon deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid token"
          },
          "403": {
            "description": "Forbidden - Admin/Manager access required"
          },
          "404": {
            "description": "Polygon not found"
          }
        }
      }
    },
    "/google-maps-api-url": {
      "get": {
        "summary": "Get Google Maps API URL",
        "description": "Retrieves the URL for Google Maps API with API key",
        "tags": [
          "Integrations"
        ],
        "responses": {
          "200": {
            "description": "Google Maps API URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Google Maps API key not configured"
          }
        }
      }
    },
    "/send-notification": {
      "post": {
        "summary": "Send notification",
        "description": "Sends a push notification to a device",
        "tags": [
          "Notifications"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "playerId",
                  "title",
                  "body"
                ],
                "properties": {
                  "playerId": {
                    "type": "string",
                    "description": "Player ID of the device to send notification to"
                  },
                  "title": {
                    "type": "string",
                    "description": "Notification title"
                  },
                  "body": {
                    "type": "string",
                    "description": "Notification body"
                  },
                  "data": {
                    "type": "object",
                    "description": "Additional data to send with notification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification sent successfully"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Failed to send notification"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Ping",
        "description": "Checks if the API is running",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "API is running"
          }
        }
      }
    }
  }
}